"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[149],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),d=l(n),h=o,f=d["".concat(c,".").concat(h)]||d[h]||s[h]||i;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var u={};for(var c in t)hasOwnProperty.call(t,c)&&(u[c]=t[c]);u.originalType=e,u.mdxType="string"==typeof e?e:o,a[1]=u;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2909:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],u={sidebar_position:4},c="Lazy Execution",l={unversionedId:"concepts/lazy-execution",id:"concepts/lazy-execution",title:"Lazy Execution",description:"When operations are added to a pipeline, they are pushed into an internal data structure but they are not executed until the pipeline's run() method is invoked.",source:"@site/docs/concepts/lazy-execution.md",sourceDirName:"concepts",slug:"/concepts/lazy-execution",permalink:"/jetl/docs/concepts/lazy-execution",editUrl:"https://github.com/simoneb/jetl/tree/master/docs/docs/concepts/lazy-execution.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Operators",permalink:"/jetl/docs/concepts/operators"},next:{title:"Table of contents",permalink:"/jetl/docs/api/"}},p=[{value:"Example",id:"example",children:[],level:2}],s={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"lazy-execution"},"Lazy Execution"),(0,i.kt)("p",null,"When operations are added to a pipeline, they are pushed into an internal data structure but they are not executed until the pipeline's ",(0,i.kt)("inlineCode",{parentName:"p"},"run()")," method is invoked."),(0,i.kt)("p",null,"When ",(0,i.kt)("inlineCode",{parentName:"p"},"run()")," is invoked, each operation is invoked in a cascading fashion, with the output of the current operation being provided as input to the next."),(0,i.kt)("p",null,"The return value of ",(0,i.kt)("inlineCode",{parentName:"p"},"run()")," is an asynchronous iterable value which can then be used."),(0,i.kt)("p",null,"At this stage no processing has happened yet, because of the lazy nature of asynchronous iterables."),(0,i.kt)("p",null,"Only when the output iterable is iterated in user code will the actual processing happen."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"This example shows a how to use a custom iterable capable of generating all integer numbers. Iterating it would lead to an infinite loop."),(0,i.kt)("p",null,"When the pipeline is executed with ",(0,i.kt)("inlineCode",{parentName:"p"},"run()")," no infinite loop happens, because the pipeline stages are only executed and no iteration occurs."),(0,i.kt)("p",null,"Iteration happens when the ",(0,i.kt)("inlineCode",{parentName:"p"},"result")," value is then iterated in your code."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:"live",live:!0},"// infinite iterable\nconst integers = {\n  current: 0,\n  next() {\n    return { value: this.current++, done: false }\n  },\n  [Symbol.iterator]() {\n    return this\n  },\n}\n\nconst result = new pipeline()\n  .add(integers)\n  .add(map(n => n + 1))\n  .run()\n\nconst output = []\n\nwhile (true) {\n  const { value } = await result.next()\n  output.push(value)\n\n  // break when more than 6 items are in output\n  if (output.length > 5) {\n    break\n  }\n}\n\nreturn output.join(', ')\n")))}d.isMDXComponent=!0}}]);