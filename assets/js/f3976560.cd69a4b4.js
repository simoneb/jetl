"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[844],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),f=a,d=m["".concat(s,".").concat(f)]||m[f]||u[f]||o;return n?r.createElement(d,i(i({ref:t},p),{},{components:n})):r.createElement(d,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},672:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={},i=void 0,l={type:"mdx",permalink:"/jetl/",source:"@site/src/pages/index.md",description:"The license of this software has changed to AWISC - Anti War ISC License",frontMatter:{}},s=[{value:"Documentation",id:"documentation",level:2},{value:"Setup",id:"setup",level:2},{value:"Usage",id:"usage",level:2}],c={toc:s};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The license of this software has changed to AWISC - Anti War ISC License")),(0,a.kt)("h1",{id:"jetl"},"jetl"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://badge.fury.io/js/jetl"},(0,a.kt)("img",{parentName:"a",src:"https://badge.fury.io/js/jetl.svg",alt:"npm version"})),"\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/simoneb/jetl/actions/workflows/ci.yml"},(0,a.kt)("img",{parentName:"a",src:"https://github.com/simoneb/jetl/actions/workflows/ci.yml/badge.svg",alt:"ci"})),"\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/simoneb/jetl/actions/workflows/release.yml"},(0,a.kt)("img",{parentName:"a",src:"https://github.com/simoneb/jetl/actions/workflows/release.yml/badge.svg",alt:"release"})),"\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/simoneb/jetl/actions/workflows/docs.yml"},(0,a.kt)("img",{parentName:"a",src:"https://github.com/simoneb/jetl/actions/workflows/docs.yml/badge.svg",alt:"docs"}))),(0,a.kt)("p",null,"JavaScript data processing with asynchronous iterators."),(0,a.kt)("h2",{id:"documentation"},"Documentation"),(0,a.kt)("p",null,"Check out the ",(0,a.kt)("a",{parentName:"p",href:"https://simoneb.github.io/jetl"},"documentation website"),"."),(0,a.kt)("h2",{id:"setup"},"Setup"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"npm i jetl\n")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"The example below comments out each line of the current file and prints the result"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const fs = require('fs')\n\nconst { pipeline } = require('jetl')\nconst { first } = require('jetl/operators')\nconst { joinStrings, map, split } = require('jetl/operations')\n\nconst result = new pipeline()             // instantiate pipeline\n  .add(fs.createReadStream(__filename))   // read file\n  .add(split())                           // split into multiple lines\n  .add(map(line => `// ${line}`))         // prepend each line with a comment\n  .add(joinStrings('\\n'))                 // join the lines together\n  .run()                                  // execute  the pipeline\n\nconsole.log(await first(result))          // print the first (only) result\n")))}p.isMDXComponent=!0}}]);